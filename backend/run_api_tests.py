#!/usr/bin/env python3
"""
Script de Configura√ß√£o e Execu√ß√£o de Testes API
Prepara ambiente e executa simula√ß√£o completa
"""

import os
import sys
import subprocess
import django
from pathlib import Path


def setup_django():
    """Configura ambiente Django"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'top_pet.settings')
    django.setup()


def check_dependencies():
    """Verifica depend√™ncias necess√°rias"""
    print("üîç Verificando depend√™ncias...")
    
    required_packages = [
        'django',
        'djangorestframework',
        'python-decouple'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
            missing.append(package)
    
    if missing:
        print(f"\n‚ö†Ô∏è  Depend√™ncias faltando: {', '.join(missing)}")
        print("Execute: pip install -r requirements.txt")
        return False
    
    return True


def prepare_database():
    """Prepara banco de dados para testes"""
    print("\nüóÑÔ∏è  Preparando banco de dados...")
    
    try:
        # Aplicar migra√ß√µes se necess√°rio
        from django.core.management import execute_from_command_line
        
        print("  ‚Ä¢ Verificando migra√ß√µes...")
        execute_from_command_line(['manage.py', 'migrate', '--verbosity=0'])
        print("  ‚úÖ Banco de dados preparado")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Erro ao preparar banco: {e}")
        return False


def create_test_data():
    """Cria dados b√°sicos se necess√°rio"""
    print("\nüìù Verificando dados b√°sicos...")
    
    try:
        setup_django()
        
        from django.contrib.auth.models import User
        from configuracao.models import HorarioFuncionamento
        
        # Criar hor√°rios de funcionamento b√°sicos se n√£o existirem
        if not HorarioFuncionamento.objects.exists():
            print("  ‚Ä¢ Criando hor√°rios de funcionamento...")
            horarios = [
                {'dia_semana': 1, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 2, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 3, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 4, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 5, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 6, 'hora_abertura': '08:00', 'hora_fechamento': '12:00'},
            ]
            
            for horario in horarios:
                HorarioFuncionamento.objects.create(**horario)
            
            print("  ‚úÖ Hor√°rios criados")
        
        return True
    except Exception as e:
        print(f"  ‚ùå Erro ao criar dados: {e}")
        return False


def run_simulation():
    """Executa simula√ß√£o de testes"""
    print("\nüöÄ Iniciando simula√ß√£o CRUD...")
    
    try:
        # Importar e executar simulador
        from test_api_simulation import APISimulator
        
        simulator = APISimulator()
        success = simulator.run_full_simulation()
        
        return success
    except Exception as e:
        print(f"‚ùå Erro durante simula√ß√£o: {e}")
        return False


def run_analysis():
    """Executa an√°lise dos resultados"""
    print("\nüìä Executando an√°lise dos resultados...")
    
    try:
        from analyze_test_report import TestReportAnalyzer
        
        analyzer = TestReportAnalyzer()
        success = analyzer.run_analysis()
        
        return success
    except Exception as e:
        print(f"‚ùå Erro durante an√°lise: {e}")
        return False


def main():
    """Fun√ß√£o principal"""
    print("üîß TOP PET SYSTEM - SETUP E TESTE API")
    print("=" * 50)
    
    # Verifica√ß√µes preliminares
    if not check_dependencies():
        return 1
    
    if not prepare_database():
        return 1
    
    if not create_test_data():
        return 1
    
    # Executar simula√ß√£o
    print("\n" + "=" * 50)
    if not run_simulation():
        print("‚ùå Simula√ß√£o falhou")
        return 1
    
    # Executar an√°lise
    print("\n" + "=" * 50)
    if not run_analysis():
        print("‚ùå An√°lise falhou")
        return 1
    
    print("\n‚úÖ PROCESSO COMPLETO FINALIZADO!")
    print("\nüìÅ Arquivos gerados:")
    print("  ‚Ä¢ api_test_report.json - Relat√≥rio detalhado")
    print("\nüí° Comandos √∫teis:")
    print("  ‚Ä¢ python test_api_simulation.py - Executar apenas simula√ß√£o")
    print("  ‚Ä¢ python analyze_test_report.py - Executar apenas an√°lise")
    print("  ‚Ä¢ cat api_test_report.json | python -m json.tool - Ver JSON formatado")
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

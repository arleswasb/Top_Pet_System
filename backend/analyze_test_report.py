#!/usr/bin/env python3
"""
Analisador de Relat√≥rios de Teste API
Gera an√°lises avan√ßadas dos resultados dos testes
"""

import json
import sys
from collections import defaultdict
from datetime import datetime
import argparse


class TestReportAnalyzer:
    """Analisador de relat√≥rios de teste"""
    
    def __init__(self, report_file='api_test_report.json'):
        self.report_file = report_file
        self.data = None
    
    def load_report(self):
        """Carrega relat√≥rio JSON"""
        try:
            with open(self.report_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            return True
        except FileNotFoundError:
            print(f"‚ùå Arquivo {self.report_file} n√£o encontrado")
            return False
        except json.JSONDecodeError:
            print(f"‚ùå Erro ao decodificar JSON em {self.report_file}")
            return False
    
    def analyze_performance(self):
        """Analisa performance das rotas"""
        print("\nüìä AN√ÅLISE DE PERFORMANCE")
        print("=" * 50)
        
        routes = self.data.get('routes_tested', [])
        if not routes:
            print("Nenhuma rota encontrada para an√°lise")
            return
        
        # Agrupar por endpoint base
        endpoint_stats = defaultdict(list)
        for route in routes:
            endpoint_base = route['endpoint'].split('?')[0]
            # Remove IDs num√©ricos para agrupar
            parts = endpoint_base.split('/')
            clean_parts = []
            for part in parts:
                if part.isdigit():
                    clean_parts.append('{id}')
                else:
                    clean_parts.append(part)
            clean_endpoint = '/'.join(clean_parts)
            
            endpoint_stats[clean_endpoint].append({
                'method': route['method'],
                'duration': route['duration'],
                'success': route['success']
            })
        
        # Calcular estat√≠sticas por endpoint
        for endpoint, stats in sorted(endpoint_stats.items()):
            durations = [s['duration'] for s in stats]
            success_count = sum(1 for s in stats if s['success'])
            
            print(f"\nüõ§Ô∏è  {endpoint}")
            print(f"   Testes: {len(stats)}")
            print(f"   Sucessos: {success_count}/{len(stats)} ({success_count/len(stats)*100:.1f}%)")
            print(f"   Tempo m√©dio: {sum(durations)/len(durations):.3f}s")
            print(f"   Tempo min/max: {min(durations):.3f}s / {max(durations):.3f}s")
            
            # M√©todos testados
            methods = defaultdict(int)
            for stat in stats:
                methods[stat['method']] += 1
            print(f"   M√©todos: {dict(methods)}")
    
    def analyze_coverage(self):
        """Analisa cobertura de testes"""
        print("\nüéØ AN√ÅLISE DE COBERTURA")
        print("=" * 50)
        
        routes = self.data.get('routes_tested', [])
        
        # Agrupar por m√≥dulo/app
        modules = defaultdict(lambda: defaultdict(set))
        
        for route in routes:
            endpoint = route['endpoint']
            method = route['method']
            
            # Extrair m√≥dulo do endpoint
            parts = endpoint.split('/')
            if len(parts) > 2:
                module = parts[2] if parts[2] else 'root'
            else:
                module = 'root'
            
            modules[module]['methods'].add(method)
            modules[module]['endpoints'].add(endpoint)
        
        for module, data in sorted(modules.items()):
            print(f"\nüì¶ M√≥dulo: {module}")
            print(f"   Endpoints testados: {len(data['endpoints'])}")
            print(f"   M√©todos HTTP: {sorted(data['methods'])}")
            
            # Listar endpoints
            for endpoint in sorted(data['endpoints']):
                print(f"     ‚Ä¢ {endpoint}")
    
    def analyze_errors(self):
        """Analisa erros encontrados"""
        print("\nüö® AN√ÅLISE DE ERROS")
        print("=" * 50)
        
        errors = self.data.get('errors', [])
        if not errors:
            print("‚úÖ Nenhum erro encontrado!")
            return
        
        # Agrupar erros por tipo
        error_types = defaultdict(list)
        for error in errors:
            error_types[error['error']].append(error['route'])
        
        for error_type, routes in error_types.items():
            print(f"\n‚ùå {error_type}")
            print(f"   Ocorr√™ncias: {len(routes)}")
            for route in routes:
                print(f"     ‚Ä¢ {route}")
    
    def analyze_timing_patterns(self):
        """Analisa padr√µes de tempo"""
        print("\n‚è±Ô∏è  AN√ÅLISE DE PADR√ïES TEMPORAIS")
        print("=" * 50)
        
        routes = self.data.get('routes_tested', [])
        
        # Agrupar por m√©todo HTTP
        method_times = defaultdict(list)
        for route in routes:
            method_times[route['method']].append(route['duration'])
        
        for method, times in sorted(method_times.items()):
            print(f"\nüîÑ {method}")
            print(f"   Testes: {len(times)}")
            print(f"   Tempo m√©dio: {sum(times)/len(times):.3f}s")
            print(f"   Tempo total: {sum(times):.3f}s")
            print(f"   Min/Max: {min(times):.3f}s / {max(times):.3f}s")
            
            # Classificar performance
            avg_time = sum(times) / len(times)
            if avg_time < 0.1:
                performance = "üü¢ Excelente"
            elif avg_time < 0.5:
                performance = "üü° Boa"
            elif avg_time < 1.0:
                performance = "üü† Aceit√°vel"
            else:
                performance = "üî¥ Lenta"
            
            print(f"   Performance: {performance}")
    
    def generate_summary(self):
        """Gera resumo executivo"""
        print("\nüìã RESUMO EXECUTIVO")
        print("=" * 50)
        
        total_tests = self.data.get('total_tests', 0)
        passed = self.data.get('passed', 0)
        failed = self.data.get('failed', 0)
        total_duration = self.data.get('total_duration', 0)
        
        print(f"Total de testes executados: {total_tests}")
        print(f"Taxa de sucesso: {passed/total_tests*100:.1f}%" if total_tests > 0 else "N/A")
        print(f"Tempo total de execu√ß√£o: {total_duration:.3f}s")
        print(f"Tempo m√©dio por teste: {total_duration/total_tests:.3f}s" if total_tests > 0 else "N/A")
        
        # Status geral
        if failed == 0:
            status = "üü¢ TODOS OS TESTES PASSARAM"
        elif failed < total_tests * 0.1:
            status = "üü° POUCOS ERROS ENCONTRADOS"
        else:
            status = "üî¥ MUITOS ERROS ENCONTRADOS"
        
        print(f"\nStatus geral: {status}")
        
        # Recomenda√ß√µes
        print(f"\nüí° RECOMENDA√á√ïES:")
        
        routes = self.data.get('routes_tested', [])
        slow_routes = [r for r in routes if r['duration'] > 1.0]
        if slow_routes:
            print(f"   ‚Ä¢ {len(slow_routes)} rotas est√£o lentas (>1s)")
        
        if failed > 0:
            print(f"   ‚Ä¢ Investigar {failed} falhas encontradas")
        
        methods_tested = set(r['method'] for r in routes)
        if 'DELETE' not in methods_tested:
            print("   ‚Ä¢ Considerar adicionar testes de DELETE")
        
        if total_duration > 30:
            print("   ‚Ä¢ Otimizar performance geral dos testes")
        
        print("   ‚Ä¢ Verificar cobertura de casos edge")
        print("   ‚Ä¢ Adicionar testes de valida√ß√£o de dados")
    
    def run_analysis(self):
        """Executa an√°lise completa"""
        if not self.load_report():
            return False
        
        print("üîç AN√ÅLISE AVAN√áADA DE TESTES API")
        print("=" * 60)
        
        self.generate_summary()
        self.analyze_performance()
        self.analyze_coverage()
        self.analyze_timing_patterns()
        self.analyze_errors()
        
        return True


def main():
    parser = argparse.ArgumentParser(description='Analisador de relat√≥rios de teste API')
    parser.add_argument('--file', '-f', default='api_test_report.json',
                       help='Arquivo de relat√≥rio JSON (padr√£o: api_test_report.json)')
    
    args = parser.parse_args()
    
    analyzer = TestReportAnalyzer(args.file)
    success = analyzer.run_analysis()
    
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())

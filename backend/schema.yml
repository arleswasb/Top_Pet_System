openapi: 3.0.3
info:
  title: Top Pet System API
  version: 1.0.0
  description: Sistema de gestão para pet shops - API completa para gerenciamento
    de pets, usuários, agendamentos e prontuários médicos.
  contact:
    name: Top Pet System
    email: contato@toppetsystem.com
  license:
    name: MIT License
paths:
  /api/:
    get:
      operationId: root_retrieve
      description: Endpoint raiz da API com links de navegação.
      summary: Página inicial da API
      tags:
      - Sistema
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Links de navegação da API
  /api/status/:
    get:
      operationId: status_retrieve
      description: Retorna informações básicas sobre o status e versão da API Top
        Pet System.
      summary: Status da API
      tags:
      - Sistema
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Informações do sistema
  /api/info/:
    get:
      operationId: info_retrieve
      description: Retorna informações detalhadas sobre a API e suas funcionalidades.
      summary: Informações da API
      tags:
      - Sistema
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: Informações detalhadas da API
  /api/auth/token/:
    post:
      operationId: auth_token_create
      description: Envie `username` e `password` para receber um token de autenticação.
      summary: Login e obter token
      tags:
      - Autenticação
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/auth/password-reset/:
    post:
      operationId: auth_password_reset_create
      description: "\n    **\U0001F4E7 Endpoint público para solicitar reset de senha.**\n\
        \    \n    **Como funciona:**\n    1. \U0001F4E4 Envie o email do usuário\n\
        \    2. \U0001F4EC Um token será enviado por email\n    3. \U0001F510 Use\
        \ o token nos próximos endpoints para definir nova senha\n    \n    **✅ CAMPO\
        \ OBRIGATÓRIO:**\n    - `email`: Email do usuário cadastrado no sistema\n\
        \    \n    **ℹ️ Observações importantes:**\n    - ✅ Não requer autenticação\
        \ (endpoint público)\n    - \U0001F4E7 Email deve estar cadastrado no sistema\n\
        \    - ⏰ Token tem validade limitada\n    - \U0001F512 Apenas um token ativo\
        \ por vez por usuário\n    "
      summary: Solicitar reset de senha
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/auth/password-reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: "\n    **\U0001F510 Confirma o reset de senha com o token recebido\
        \ por email.**\n    \n    **Como usar:**\n    1. \U0001F4E7 Use o token recebido\
        \ por email\n    2. \U0001F511 Defina a nova senha\n    3. ✅ Senha será alterada\
        \ imediatamente\n    \n    **✅ CAMPOS OBRIGATÓRIOS:**\n    - `token`: Token\
        \ recebido por email\n    - `password`: Nova senha (mínimo 8 caracteres)\n\
        \    \n    **ℹ️ Observações importantes:**\n    - ✅ Não requer autenticação\
        \ (endpoint público) \n    - \U0001F510 Token deve ser válido e não expirado\n\
        \    - \U0001F511 Nova senha deve atender aos critérios de segurança\n   \
        \ - ⚡ Token é consumido após uso (não pode ser reutilizado)\n    "
      summary: Confirmar reset de senha
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/auth/password-reset/validate_token/:
    post:
      operationId: auth_password_reset_validate_token_create
      description: "\n    **✅ Valida se um token de reset de senha é válido.**\n \
        \   \n    **Uso recomendado:**\n    - \U0001F50D Verificar se token é válido\
        \ antes de mostrar tela de nova senha\n    - ⏰ Verificar se token não expirou\n\
        \    - \U0001F6E1️ Validação de segurança adicional\n    \n    **✅ CAMPO OBRIGATÓRIO:**\n\
        \    - `token`: Token a ser validado\n    \n    **ℹ️ Observações importantes:**\n\
        \    - ✅ Não requer autenticação (endpoint público)\n    - \U0001F50D Apenas\
        \ valida, não consome o token\n    - ⏰ Retorna informações sobre validade\n\
        \    "
      summary: Validar token de reset
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /api/pets/:
    get:
      operationId: pets_list
      description: Retorna lista de pets. Clientes veem apenas seus pets, funcionários/admins
        veem todos.
      summary: Listar pets
      tags:
      - Pets
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
          description: ''
    post:
      operationId: pets_create
      description: Cria um novo pet. Para clientes, o tutor é definido automaticamente.
        Suporte a upload de foto (multipart/form-data).
      summary: Criar pet
      tags:
      - Pets
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
  /api/pets/{id}/:
    get:
      operationId: pets_retrieve
      description: Retorna detalhes de um pet específico.
      summary: Detalhes do pet
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Pet.
        required: true
      tags:
      - Pets
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    patch:
      operationId: pets_partial_update
      description: Atualiza parcialmente um pet. Apenas os campos enviados serão alterados,
        preservando os demais dados.
      summary: Atualizar pet
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Pet.
        required: true
      tags:
      - Pets
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPetRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPetRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pets_destroy
      description: Remove um pet do sistema. Apenas o dono ou admin pode deletar.
      summary: Deletar pet
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Pet.
        required: true
      tags:
      - Pets
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/users/logs/:
    get:
      operationId: users_logs_retrieve
      description: Retorna as últimas 100 linhas do log de debug. Acesso restrito
        a administradores.
      summary: Visualizar logs do sistema (Admin)
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
          description: ''
  /api/users/register/:
    post:
      operationId: users_register_create
      description: "\n    **\U0001F513 Endpoint público para auto-cadastro** de novos\
        \ usuários como CLIENTE.\n    \n    **✅ CAMPOS OBRIGATÓRIOS:**\n    - `username`:\
        \ Nome de usuário único\n    - `password`: Senha com no mínimo 8 caracteres\
        \  \n    - `confirm_password`: Confirmação da senha\n    - `email`: Email\
        \ válido para contato\n    - `first_name`: Primeiro nome\n    - `last_name`:\
        \ Sobrenome\n    \n    **⚪ CAMPOS OPCIONAIS:**\n    - `telefone`: Telefone\
        \ de contato (pode ficar vazio)\n    - `endereco`: Endereço residencial (pode\
        \ ficar vazio)\n    \n    **ℹ️ Observações importantes:**\n    - ✅ Não requer\
        \ autenticação (endpoint público)\n    - \U0001F512 O tipo de usuário é automaticamente\
        \ definido como CLIENTE\n    - ❌ Campos CRMV e especialidade NÃO se aplicam\
        \ a este endpoint\n    - \U0001F4E7 Email deve ser único no sistema\n    -\
        \ \U0001F464 Username deve ser único no sistema\n    - \U0001F510 Senhas devem\
        \ ter pelo menos 8 caracteres\n    \n    **\U0001F4A1 Dica:** Os campos telefone\
        \ e endereço podem ser preenchidos posteriormente no perfil do usuário.\n\
        \    "
      summary: Auto-cadastro de cliente
      tags:
      - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSelfRegisterRequest'
            examples:
              CadastroCompleto:
                value:
                  username: joao_silva
                  password: minhasenha123
                  confirm_password: minhasenha123
                  email: joao@email.com
                  first_name: João
                  last_name: Silva
                  telefone: (11) 99999-9999
                  endereco: Rua das Flores, 123 - São Paulo/SP
                summary: Cadastro Completo
                description: Exemplo com todos os campos (obrigatórios e opcionais)
                  preenchidos
              CadastroMínimo:
                value:
                  username: maria_santos
                  password: senha123
                  confirm_password: senha123
                  email: maria@email.com
                  first_name: Maria
                  last_name: Santos
                summary: Cadastro Mínimo
                description: Apenas campos obrigatórios - telefone e endereço são
                  OPCIONAIS
              ApenasComTelefone:
                value:
                  username: carlos_oliveira
                  password: novasenha456
                  confirm_password: novasenha456
                  email: carlos@email.com
                  first_name: Carlos
                  last_name: Oliveira
                  telefone: (21) 88888-8888
                summary: Apenas com Telefone
                description: Campos obrigatórios + telefone (endereço continua opcional)
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSelfRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSelfRegisterRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
              examples:
                CadastroCompleto:
                  value:
                    username: joao_silva
                    password: minhasenha123
                    confirm_password: minhasenha123
                    email: joao@email.com
                    first_name: João
                    last_name: Silva
                    telefone: (11) 99999-9999
                    endereco: Rua das Flores, 123 - São Paulo/SP
                  summary: Cadastro Completo
                  description: Exemplo com todos os campos (obrigatórios e opcionais)
                    preenchidos
                CadastroMínimo:
                  value:
                    username: maria_santos
                    password: senha123
                    confirm_password: senha123
                    email: maria@email.com
                    first_name: Maria
                    last_name: Santos
                  summary: Cadastro Mínimo
                  description: Apenas campos obrigatórios - telefone e endereço são
                    OPCIONAIS
                ApenasComTelefone:
                  value:
                    username: carlos_oliveira
                    password: novasenha456
                    confirm_password: novasenha456
                    email: carlos@email.com
                    first_name: Carlos
                    last_name: Oliveira
                    telefone: (21) 88888-8888
                  summary: Apenas com Telefone
                  description: Campos obrigatórios + telefone (endereço continua opcional)
          description: ''
  /api/users/me/:
    get:
      operationId: users_me_retrieve
      description: Retorna informações detalhadas do perfil do usuário atualmente
        logado.
      summary: Meu perfil
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    put:
      operationId: users_me_update
      description: Retorna informações detalhadas do perfil do usuário atualmente
        logado.
      summary: Meu perfil
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: users_me_partial_update
      description: Retorna informações detalhadas do perfil do usuário atualmente
        logado.
      summary: Meu perfil
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/users/admin/users/:
    get:
      operationId: users_admin_users_list
      description: ViewSet para gestão completa de todos os usuários por administradores.
      summary: Listar todos os usuários (Admin)
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAdmin'
          description: ''
    post:
      operationId: users_admin_users_create
      description: ViewSet para gestão completa de todos os usuários por administradores.
      summary: Criar usuário (Admin)
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAdminCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAdminCreateRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdminCreate'
          description: ''
  /api/users/admin/users/{id}/:
    get:
      operationId: users_admin_users_retrieve
      description: ViewSet para gestão completa de todos os usuários por administradores.
      summary: Detalhes do usuário (Admin)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
          description: ''
    patch:
      operationId: users_admin_users_partial_update
      description: ViewSet para gestão completa de todos os usuários por administradores.
      summary: Atualizar usuário (Admin)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
          description: ''
    delete:
      operationId: users_admin_users_destroy
      description: ViewSet para gestão completa de todos os usuários por administradores.
      summary: Deletar usuário (Admin)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/users/admin/users/{id}/toggle-active/:
    post:
      operationId: users_admin_users_toggle_active_create
      description: Ação customizada para ativar ou desativar um usuário.
      summary: Ativar/Desativar usuário (Admin)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAdminRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
          description: ''
  /api/users/funcionario/users/:
    get:
      operationId: users_funcionario_users_list
      description: ViewSet para funcionários gerenciarem usuários do tipo CLIENTE.
      summary: Listar clientes (Funcionário)
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetail'
          description: ''
    post:
      operationId: users_funcionario_users_create
      description: ViewSet para funcionários gerenciarem usuários do tipo CLIENTE.
      summary: Criar usuário (Funcionário)
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFuncionarioCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserFuncionarioCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserFuncionarioCreateRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFuncionarioCreate'
          description: ''
  /api/users/funcionario/users/{id}/:
    get:
      operationId: users_funcionario_users_retrieve
      description: ViewSet para funcionários gerenciarem usuários do tipo CLIENTE.
      summary: Detalhes do cliente (Funcionário)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: users_funcionario_users_partial_update
      description: ViewSet para funcionários gerenciarem usuários do tipo CLIENTE.
      summary: Atualizar cliente (Funcionário)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
          description: ''
    delete:
      operationId: users_funcionario_users_destroy
      description: ViewSet para funcionários gerenciarem usuários do tipo CLIENTE.
      summary: Excluir cliente (Funcionário)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - Usuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/configuracao/horarios-funcionamento/:
    get:
      operationId: configuracao_horarios_funcionamento_list
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Listar horários de funcionamento
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HorarioFuncionamento'
          description: ''
    post:
      operationId: configuracao_horarios_funcionamento_create
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Criar horário de funcionamento
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorarioFuncionamento'
          description: ''
  /api/configuracao/horarios-funcionamento/{id}/:
    get:
      operationId: configuracao_horarios_funcionamento_retrieve
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Detalhes do horário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Horário de Funcionamento.
        required: true
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorarioFuncionamento'
          description: ''
    patch:
      operationId: configuracao_horarios_funcionamento_partial_update
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Atualizar horário parcialmente
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Horário de Funcionamento.
        required: true
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHorarioFuncionamentoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHorarioFuncionamentoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHorarioFuncionamentoRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorarioFuncionamento'
          description: ''
    put:
      operationId: configuracao_horarios_funcionamento_update
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Atualizar horário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Horário de Funcionamento.
        required: true
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HorarioFuncionamentoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorarioFuncionamento'
          description: ''
    delete:
      operationId: configuracao_horarios_funcionamento_destroy
      description: ViewSet para gerenciar horários de funcionamento da clínica
      summary: Deletar horário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Horário de Funcionamento.
        required: true
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/configuracao/feriados/:
    get:
      operationId: configuracao_feriados_list
      description: ViewSet para gerenciar feriados da clínica
      summary: Listar feriados
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feriado'
          description: ''
    post:
      operationId: configuracao_feriados_create
      description: ViewSet para gerenciar feriados da clínica
      summary: Criar feriado
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feriado'
          description: ''
  /api/configuracao/feriados/{id}/:
    get:
      operationId: configuracao_feriados_retrieve
      description: ViewSet para gerenciar feriados da clínica
      summary: Detalhes do feriado
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Feriado.
        required: true
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feriado'
          description: ''
    patch:
      operationId: configuracao_feriados_partial_update
      description: ViewSet para gerenciar feriados da clínica
      summary: Atualizar feriado parcialmente
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Feriado.
        required: true
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFeriadoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFeriadoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFeriadoRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feriado'
          description: ''
    put:
      operationId: configuracao_feriados_update
      description: ViewSet para gerenciar feriados da clínica
      summary: Atualizar feriado
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Feriado.
        required: true
      tags:
      - Configuração
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FeriadoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feriado'
          description: ''
    delete:
      operationId: configuracao_feriados_destroy
      description: ViewSet para gerenciar feriados da clínica
      summary: Deletar feriado
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Feriado.
        required: true
      tags:
      - Configuração
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/agendamentos/horarios-disponiveis/:
    get:
      operationId: agendamentos_horarios_disponiveis_retrieve
      description: Retorna uma lista de horários disponíveis para agendamento em um
        dia específico.
      summary: Listar horários disponíveis
      parameters:
      - in: query
        name: data
        schema:
          type: string
          format: date
        description: Data para consulta no formato YYYY-MM-DD.
        required: true
      tags:
      - Horários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HorarioDisponivel'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Parâmetro de data inválido ou ausente
          description: ''
  /api/agendamentos/servicos/:
    get:
      operationId: agendamentos_servicos_list
      description: |-
        Endpoint que permite gerenciar os Serviços da clínica veterinária.
        - **Listar/Ver**: Qualquer usuário autenticado
        - **Criar/Editar/Excluir**: Administradores, funcionários e veterinários
      summary: Listar serviços
      tags:
      - Serviços
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Servico'
          description: ''
    post:
      operationId: agendamentos_servicos_create
      description: |-
        Endpoint que permite gerenciar os Serviços da clínica veterinária.
        - **Listar/Ver**: Qualquer usuário autenticado
        - **Criar/Editar/Excluir**: Administradores, funcionários e veterinários
      summary: Criar serviço
      tags:
      - Serviços
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ServicoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ServicoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servico'
          description: ''
  /api/agendamentos/servicos/{id}/:
    get:
      operationId: agendamentos_servicos_retrieve
      description: |-
        Endpoint que permite gerenciar os Serviços da clínica veterinária.
        - **Listar/Ver**: Qualquer usuário autenticado
        - **Criar/Editar/Excluir**: Administradores, funcionários e veterinários
      summary: Detalhes do serviço
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this servico.
        required: true
      tags:
      - Serviços
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servico'
          description: ''
    patch:
      operationId: agendamentos_servicos_partial_update
      description: |-
        Endpoint que permite gerenciar os Serviços da clínica veterinária.
        - **Listar/Ver**: Qualquer usuário autenticado
        - **Criar/Editar/Excluir**: Administradores, funcionários e veterinários
      summary: Atualizar serviço
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this servico.
        required: true
      tags:
      - Serviços
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedServicoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedServicoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedServicoRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servico'
          description: ''
    delete:
      operationId: agendamentos_servicos_destroy
      description: |-
        Endpoint que permite gerenciar os Serviços da clínica veterinária.
        - **Listar/Ver**: Qualquer usuário autenticado
        - **Criar/Editar/Excluir**: Administradores, funcionários e veterinários
      summary: Deletar serviço
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this servico.
        required: true
      tags:
      - Serviços
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/agendamentos/:
    get:
      operationId: agendamentos_list
      description: |-
        Endpoint para gerenciar agendamentos de consultas e serviços.
        **Permissões:**
        - **Clientes**: Podem criar agendamentos para seus pets e ver apenas os próprios
        - **Funcionários/Veterinários**: Podem ver e gerenciar todos os agendamentos
        - **Admins**: Acesso completo a todos os agendamentos
      summary: Listar agendamentos
      tags:
      - Agendamentos
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agendamento'
          description: ''
    post:
      operationId: agendamentos_create
      description: |-
        Endpoint para gerenciar agendamentos de consultas e serviços.
        **Permissões:**
        - **Clientes**: Podem criar agendamentos para seus pets e ver apenas os próprios
        - **Funcionários/Veterinários**: Podem ver e gerenciar todos os agendamentos
        - **Admins**: Acesso completo a todos os agendamentos
      summary: Criar agendamento
      tags:
      - Agendamentos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgendamentoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgendamentoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgendamentoRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agendamento'
          description: ''
  /api/agendamentos/{id}/:
    get:
      operationId: agendamentos_retrieve
      description: |-
        Endpoint para gerenciar agendamentos de consultas e serviços.
        **Permissões:**
        - **Clientes**: Podem criar agendamentos para seus pets e ver apenas os próprios
        - **Funcionários/Veterinários**: Podem ver e gerenciar todos os agendamentos
        - **Admins**: Acesso completo a todos os agendamentos
      summary: Detalhes do agendamento
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agendamento.
        required: true
      tags:
      - Agendamentos
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agendamento'
          description: ''
    patch:
      operationId: agendamentos_partial_update
      description: |-
        Endpoint para gerenciar agendamentos de consultas e serviços.
        **Permissões:**
        - **Clientes**: Podem criar agendamentos para seus pets e ver apenas os próprios
        - **Funcionários/Veterinários**: Podem ver e gerenciar todos os agendamentos
        - **Admins**: Acesso completo a todos os agendamentos
      summary: Atualizar agendamento
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agendamento.
        required: true
      tags:
      - Agendamentos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAgendamentoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAgendamentoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAgendamentoRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agendamento'
          description: ''
    delete:
      operationId: agendamentos_destroy
      description: |-
        Endpoint para gerenciar agendamentos de consultas e serviços.
        **Permissões:**
        - **Clientes**: Podem criar agendamentos para seus pets e ver apenas os próprios
        - **Funcionários/Veterinários**: Podem ver e gerenciar todos os agendamentos
        - **Admins**: Acesso completo a todos os agendamentos
      summary: Cancelar agendamento
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agendamento.
        required: true
      tags:
      - Agendamentos
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/prontuarios/:
    get:
      operationId: prontuarios_list
      description: |-
        Lista prontuários médicos conforme permissão do usuário:
        - **Clientes**: Apenas prontuários dos seus pets
        - **Funcionários/Admins**: Todos os prontuários
        - **Veterinários**: Podem criar e ver todos os prontuários
      summary: Listar prontuários
      tags:
      - Prontuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prontuario'
          description: ''
    post:
      operationId: prontuarios_create
      description: Cria um novo prontuário médico (apenas veterinários e admins).
      summary: Criar prontuário
      tags:
      - Prontuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProntuarioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProntuarioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProntuarioRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prontuario'
          description: ''
  /api/prontuarios/{id}/:
    get:
      operationId: prontuarios_retrieve
      description: Obtém os detalhes completos de um prontuário médico.
      summary: Detalhes do prontuário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Prontuário.
        required: true
      tags:
      - Prontuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prontuario'
          description: ''
    patch:
      operationId: prontuarios_partial_update
      description: Atualiza parcialmente um prontuário médico.
      summary: Atualizar prontuário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Prontuário.
        required: true
      tags:
      - Prontuários
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProntuarioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProntuarioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProntuarioRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prontuario'
          description: ''
    delete:
      operationId: prontuarios_destroy
      description: Exclui um prontuário médico (apenas admins).
      summary: Excluir prontuário
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Prontuário.
        required: true
      tags:
      - Prontuários
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Agendamento:
      type: object
      description: |-
        Serializer para criação e gerenciamento de agendamentos de serviços para pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet_id, servico_id, data_hora
        - **Campos opcionais**: observacoes, status
        - **Campos automáticos**: id (gerado automaticamente)
        - **Campos de leitura**: pet (dados completos), servico (dados completos)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Serviço deve estar disponível
        - Data/hora deve ser futura
        - Não pode haver conflito de horários

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet_id": 1,
            "servico_id": 2,
            "data_hora": "2024-01-15T14:30:00",
            "observacoes": "Pet tem medo de barulho, favor usar equipamentos silenciosos"
        }
        ```

        📊 **Status disponíveis:**
        - AGENDADO: Agendamento confirmado (padrão)
        - CONCLUIDO: Serviço realizado
        - CANCELADO: Agendamento cancelado
      properties:
        id:
          type: integer
          readOnly: true
        data_hora:
          type: string
          format: date-time
          description: 'Data e hora do agendamento (formato: YYYY-MM-DDTHH:MM:SS)'
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          default: AGENDADO
          description: |-
            Status atual do agendamento

            * `AGENDADO` - Agendado
            * `CONCLUIDO` - Concluído
            * `CANCELADO` - Cancelado
        observacoes:
          type: string
          description: Informações adicionais sobre o agendamento, cuidados especiais
            ou observações importantes
        pet:
          allOf:
          - $ref: '#/components/schemas/Pet'
          readOnly: true
        servico:
          allOf:
          - $ref: '#/components/schemas/Servico'
          readOnly: true
      required:
      - data_hora
      - id
      - pet
      - servico
    AgendamentoRequest:
      type: object
      description: |-
        Serializer para criação e gerenciamento de agendamentos de serviços para pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet_id, servico_id, data_hora
        - **Campos opcionais**: observacoes, status
        - **Campos automáticos**: id (gerado automaticamente)
        - **Campos de leitura**: pet (dados completos), servico (dados completos)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Serviço deve estar disponível
        - Data/hora deve ser futura
        - Não pode haver conflito de horários

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet_id": 1,
            "servico_id": 2,
            "data_hora": "2024-01-15T14:30:00",
            "observacoes": "Pet tem medo de barulho, favor usar equipamentos silenciosos"
        }
        ```

        📊 **Status disponíveis:**
        - AGENDADO: Agendamento confirmado (padrão)
        - CONCLUIDO: Serviço realizado
        - CANCELADO: Agendamento cancelado
      properties:
        data_hora:
          type: string
          format: date-time
          description: 'Data e hora do agendamento (formato: YYYY-MM-DDTHH:MM:SS)'
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          default: AGENDADO
          description: |-
            Status atual do agendamento

            * `AGENDADO` - Agendado
            * `CONCLUIDO` - Concluído
            * `CANCELADO` - Cancelado
        observacoes:
          type: string
          description: Informações adicionais sobre o agendamento, cuidados especiais
            ou observações importantes
        pet_id:
          type: integer
          writeOnly: true
          description: ID do pet que receberá o serviço
        servico_id:
          type: integer
          writeOnly: true
          description: ID do serviço a ser agendado (apenas serviços disponíveis)
      required:
      - data_hora
      - pet_id
      - servico_id
    AuthToken:
      type: object
      properties:
        token:
          type: string
          readOnly: true
      required:
      - token
    AuthTokenRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    DiaSemanaEnum:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      type: integer
      description: |-
        * `0` - Segunda-feira
        * `1` - Terça-feira
        * `2` - Quarta-feira
        * `3` - Quinta-feira
        * `4` - Sexta-feira
        * `5` - Sábado
        * `6` - Domingo
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    EmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    Feriado:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        nome:
          type: string
          maxLength: 100
        data:
          type: string
          format: date
        recorrente:
          type: boolean
          description: Se marcado, o feriado se repete anualmente
        ativo:
          type: boolean
      required:
      - data
      - id
      - nome
    FeriadoRequest:
      type: object
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 100
        data:
          type: string
          format: date
        recorrente:
          type: boolean
          description: Se marcado, o feriado se repete anualmente
        ativo:
          type: boolean
      required:
      - data
      - nome
    HorarioDisponivel:
      type: object
      description: |-
        Serializer para resposta de horários disponíveis.
        Usado apenas para documentação da API.
      properties:
        horarios:
          type: array
          items:
            type: string
            maxLength: 5
          description: Lista de horários disponíveis no formato HH:MM
      required:
      - horarios
    HorarioFuncionamento:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        dia_semana:
          allOf:
          - $ref: '#/components/schemas/DiaSemanaEnum'
          minimum: -9223372036854775808
          maximum: 9223372036854775807
        dia_semana_display:
          type: string
          readOnly: true
        hora_abertura:
          type: string
          format: time
        hora_fechamento:
          type: string
          format: time
        ativo:
          type: boolean
      required:
      - dia_semana
      - dia_semana_display
      - hora_abertura
      - hora_fechamento
      - id
    HorarioFuncionamentoRequest:
      type: object
      properties:
        dia_semana:
          allOf:
          - $ref: '#/components/schemas/DiaSemanaEnum'
          minimum: -9223372036854775808
          maximum: 9223372036854775807
        hora_abertura:
          type: string
          format: time
        hora_fechamento:
          type: string
          format: time
        ativo:
          type: boolean
      required:
      - dia_semana
      - hora_abertura
      - hora_fechamento
    LogResponse:
      type: object
      description: Serializer para a resposta do endpoint de logs.
      properties:
        content:
          type: string
          description: Conteúdo do arquivo de log
      required:
      - content
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PasswordTokenRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - password
      - token
    PatchedAgendamentoRequest:
      type: object
      description: |-
        Serializer para criação e gerenciamento de agendamentos de serviços para pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet_id, servico_id, data_hora
        - **Campos opcionais**: observacoes, status
        - **Campos automáticos**: id (gerado automaticamente)
        - **Campos de leitura**: pet (dados completos), servico (dados completos)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Serviço deve estar disponível
        - Data/hora deve ser futura
        - Não pode haver conflito de horários

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet_id": 1,
            "servico_id": 2,
            "data_hora": "2024-01-15T14:30:00",
            "observacoes": "Pet tem medo de barulho, favor usar equipamentos silenciosos"
        }
        ```

        📊 **Status disponíveis:**
        - AGENDADO: Agendamento confirmado (padrão)
        - CONCLUIDO: Serviço realizado
        - CANCELADO: Agendamento cancelado
      properties:
        data_hora:
          type: string
          format: date-time
          description: 'Data e hora do agendamento (formato: YYYY-MM-DDTHH:MM:SS)'
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          default: AGENDADO
          description: |-
            Status atual do agendamento

            * `AGENDADO` - Agendado
            * `CONCLUIDO` - Concluído
            * `CANCELADO` - Cancelado
        observacoes:
          type: string
          description: Informações adicionais sobre o agendamento, cuidados especiais
            ou observações importantes
        pet_id:
          type: integer
          writeOnly: true
          description: ID do pet que receberá o serviço
        servico_id:
          type: integer
          writeOnly: true
          description: ID do serviço a ser agendado (apenas serviços disponíveis)
    PatchedFeriadoRequest:
      type: object
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 100
        data:
          type: string
          format: date
        recorrente:
          type: boolean
          description: Se marcado, o feriado se repete anualmente
        ativo:
          type: boolean
    PatchedHorarioFuncionamentoRequest:
      type: object
      properties:
        dia_semana:
          allOf:
          - $ref: '#/components/schemas/DiaSemanaEnum'
          minimum: -9223372036854775808
          maximum: 9223372036854775807
        hora_abertura:
          type: string
          format: time
        hora_fechamento:
          type: string
          format: time
        ativo:
          type: boolean
    PatchedPetRequest:
      type: object
      description: |-
        Serializer para criação e atualização de pets.

        Exemplo de uso:
        {
            "nome": "Rex",
            "especie": "Cão",
            "raca": "Golden Retriever",
            "data_de_nascimento": "2020-05-15",
            "sexo": "MACHO",
            "observacoes": "Pet muito dócil e brincalhão"
        }
      properties:
        nome:
          type: string
          minLength: 1
          description: Nome do pet
          maxLength: 100
        especie:
          type: string
          minLength: 1
          description: 'Espécie do pet (ex: Cão, Gato, Pássaro)'
          maxLength: 50
        raca:
          type: string
          description: Raça do pet (opcional)
          maxLength: 50
        data_de_nascimento:
          type: string
          format: date
          nullable: true
          description: 'Data de nascimento do pet (formato: YYYY-MM-DD)'
        sexo:
          allOf:
          - $ref: '#/components/schemas/SexoEnum'
          default: DESCONHECIDO
          description: |-
            Sexo do pet

            * `MACHO` - Macho
            * `FEMEA` - Fêmea
            * `DESCONHECIDO` - Desconhecido
        foto:
          type: string
          format: binary
          description: Upload de foto do pet (JPG, JPEG ou PNG)
          pattern: (?:jpg|jpeg|png)$
        observacoes:
          type: string
          description: Observações adicionais sobre o pet
        tutor:
          type: integer
          writeOnly: true
          description: ID do usuário que será o tutor do pet (obrigatório para funcionários)
    PatchedProntuarioRequest:
      type: object
      description: |-
        Serializer para criação e gerenciamento de prontuários médicos dos pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet, veterinario, motivo_consulta
        - **Campos opcionais**: data_consulta, tipo_consulta, peso, temperatura, exame_fisico, diagnostico, tratamento, medicamentos, observacoes, proxima_consulta
        - **Campos automáticos**: id, created_at, updated_at, idade_pet (calculados automaticamente)
        - **Campos de leitura**: pet_nome, veterinario_nome, tipo_consulta_display (para exibição)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Veterinário deve ser um usuário válido
        - Peso deve ser positivo (se informado)
        - Temperatura deve estar entre 35°C e 45°C (se informada)
        - Data da consulta não pode ser muito no futuro

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet": 1,
            "veterinario": 3,
            "data_consulta": "2024-01-15T10:30:00",
            "tipo_consulta": "ROTINA",
            "peso": "5.2",
            "temperatura": "38.5",
            "motivo_consulta": "Consulta de rotina e aplicação de vacina anual",
            "exame_fisico": "Animal alerta, responsivo. Mucosas rosadas. Ausculta cardiopulmonar normal.",
            "diagnostico": "Animal saudável",
            "tratamento": "Aplicação de vacina V10",
            "medicamentos": "Vacina V10 - 1ml subcutânea",
            "observacoes": "Próxima vacina em 12 meses",
            "proxima_consulta": "2025-01-15T10:30:00"
        }
        ```

        🏥 **Tipos de consulta disponíveis:**
        - ROTINA: Consulta de Rotina (padrão)
        - EMERGENCIA: Emergência
        - RETORNO: Retorno
        - EXAME: Exame
        - CIRURGIA: Cirurgia
        - VACINA: Vacinação
      properties:
        pet:
          type: integer
          description: ID do pet que está sendo atendido
        veterinario:
          type: integer
          description: ID do veterinário responsável pelo atendimento
        motivo_consulta:
          type: string
          minLength: 1
          description: Descreva o motivo principal da consulta, sintomas relatados
            pelo tutor ou observações iniciais
        data_consulta:
          type: string
          format: date-time
          description: 'Data e hora da consulta (formato: YYYY-MM-DDTHH:MM:SS). Se
            não informado, usa data/hora atual'
        tipo_consulta:
          allOf:
          - $ref: '#/components/schemas/TipoConsultaEnum'
          default: ROTINA
          description: |-
            Tipo de consulta realizada

            * `ROTINA` - Consulta de Rotina
            * `EMERGENCIA` - Emergência
            * `RETORNO` - Retorno
            * `EXAME` - Exame
            * `CIRURGIA` - Cirurgia
            * `VACINA` - Vacinação
        peso:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: 'Peso atual do pet em quilogramas (ex: 5.20)'
        temperatura:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          nullable: true
          description: 'Temperatura corporal em graus Celsius, entre 35°C e 45°C (ex:
            38.5)'
        exame_fisico:
          type: string
          description: 'Descrição detalhada do exame físico realizado: inspeção, palpação,
            ausculta, etc.'
        diagnostico:
          type: string
          description: Diagnóstico médico com base nos achados clínicos e exames complementares
        tratamento:
          type: string
          description: 'Descrição do tratamento prescrito: procedimentos realizados,
            orientações ao tutor'
        medicamentos:
          type: string
          description: 'Lista detalhada dos medicamentos prescritos: nome, dosagem,
            frequência, duração'
        observacoes:
          type: string
          description: Observações adicionais, recomendações especiais ou informações
            relevantes
        proxima_consulta:
          type: string
          format: date-time
          nullable: true
          description: Data e hora da próxima consulta agendada (se aplicável)
    PatchedServicoRequest:
      type: object
      description: |-
        Serializer para criação e listagem de serviços oferecidos pelo pet shop.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: nome, preco
        - **Campos opcionais**: descricao, duracao, disponivel
        - **Validações especiais**: nome único, preço positivo

        💡 **Exemplo de uso:**
        ```json
        {
            "nome": "Banho e Tosa Completa",
            "descricao": "Banho com produtos especializados, tosa higiênica e corte de unhas",
            "duracao": "01:30:00",
            "preco": "45.00",
            "disponivel": true
        }
        ```
      properties:
        nome:
          type: string
          minLength: 1
          description: 'Nome do serviço oferecido (ex: Banho e Tosa, Consulta Veterinária)'
          maxLength: 100
        descricao:
          type: string
          description: Descrição detalhada do serviço incluindo o que está incluído
        duracao:
          type: string
          description: 'Duração estimada do serviço no formato HH:MM:SS (ex: 01:30:00
            para 1h30min)'
        preco:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          description: 'Valor do serviço em reais (ex: 45.00)'
        disponivel:
          type: boolean
          default: true
          description: Marque se o serviço está sendo oferecido atualmente
    PatchedUserAdminRequest:
      type: object
      description: Serializer para operações administrativas de usuários
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          $ref: '#/components/schemas/ProfileRequest'
    PatchedUserDetailRequest:
      type: object
      description: Serializer para visualização completa do usuário
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
    Pet:
      type: object
      description: |-
        Serializer para criação e atualização de pets.

        Exemplo de uso:
        {
            "nome": "Rex",
            "especie": "Cão",
            "raca": "Golden Retriever",
            "data_de_nascimento": "2020-05-15",
            "sexo": "MACHO",
            "observacoes": "Pet muito dócil e brincalhão"
        }
      properties:
        nome:
          type: string
          description: Nome do pet
          maxLength: 100
        especie:
          type: string
          description: 'Espécie do pet (ex: Cão, Gato, Pássaro)'
          maxLength: 50
        raca:
          type: string
          description: Raça do pet (opcional)
          maxLength: 50
        data_de_nascimento:
          type: string
          format: date
          nullable: true
          description: 'Data de nascimento do pet (formato: YYYY-MM-DD)'
        sexo:
          allOf:
          - $ref: '#/components/schemas/SexoEnum'
          default: DESCONHECIDO
          description: |-
            Sexo do pet

            * `MACHO` - Macho
            * `FEMEA` - Fêmea
            * `DESCONHECIDO` - Desconhecido
        foto:
          type: string
          format: uri
          description: Upload de foto do pet (JPG, JPEG ou PNG)
          pattern: (?:jpg|jpeg|png)$
        observacoes:
          type: string
          description: Observações adicionais sobre o pet
        tutor_detail:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        id:
          type: integer
          readOnly: true
        idade:
          type: string
          default: Idade não informada
          readOnly: true
          description: 'Idade formatada do pet (ex: ''2 anos e 3 meses'')'
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: Criado Em
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: Última Atualização
      required:
      - created_at
      - especie
      - id
      - idade
      - nome
      - tutor_detail
      - updated_at
    PetRequest:
      type: object
      description: |-
        Serializer para criação e atualização de pets.

        Exemplo de uso:
        {
            "nome": "Rex",
            "especie": "Cão",
            "raca": "Golden Retriever",
            "data_de_nascimento": "2020-05-15",
            "sexo": "MACHO",
            "observacoes": "Pet muito dócil e brincalhão"
        }
      properties:
        nome:
          type: string
          minLength: 1
          description: Nome do pet
          maxLength: 100
        especie:
          type: string
          minLength: 1
          description: 'Espécie do pet (ex: Cão, Gato, Pássaro)'
          maxLength: 50
        raca:
          type: string
          description: Raça do pet (opcional)
          maxLength: 50
        data_de_nascimento:
          type: string
          format: date
          nullable: true
          description: 'Data de nascimento do pet (formato: YYYY-MM-DD)'
        sexo:
          allOf:
          - $ref: '#/components/schemas/SexoEnum'
          default: DESCONHECIDO
          description: |-
            Sexo do pet

            * `MACHO` - Macho
            * `FEMEA` - Fêmea
            * `DESCONHECIDO` - Desconhecido
        foto:
          type: string
          format: binary
          description: Upload de foto do pet (JPG, JPEG ou PNG)
          pattern: (?:jpg|jpeg|png)$
        observacoes:
          type: string
          description: Observações adicionais sobre o pet
        tutor:
          type: integer
          writeOnly: true
          description: ID do usuário que será o tutor do pet (obrigatório para funcionários)
      required:
      - especie
      - nome
    Profile:
      type: object
      description: Serializer para o perfil do usuário
      properties:
        role:
          $ref: '#/components/schemas/Role821Enum'
        role_display:
          type: string
          readOnly: true
        telefone:
          type: string
          nullable: true
          maxLength: 20
        endereco:
          type: string
          nullable: true
          title: Endereço
        crmv:
          type: string
          nullable: true
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          maxLength: 100
      required:
      - role_display
    ProfileRequest:
      type: object
      description: Serializer para o perfil do usuário
      properties:
        role:
          $ref: '#/components/schemas/Role821Enum'
        telefone:
          type: string
          nullable: true
          maxLength: 20
        endereco:
          type: string
          nullable: true
          title: Endereço
        crmv:
          type: string
          nullable: true
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          maxLength: 100
    Prontuario:
      type: object
      description: |-
        Serializer para criação e gerenciamento de prontuários médicos dos pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet, veterinario, motivo_consulta
        - **Campos opcionais**: data_consulta, tipo_consulta, peso, temperatura, exame_fisico, diagnostico, tratamento, medicamentos, observacoes, proxima_consulta
        - **Campos automáticos**: id, created_at, updated_at, idade_pet (calculados automaticamente)
        - **Campos de leitura**: pet_nome, veterinario_nome, tipo_consulta_display (para exibição)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Veterinário deve ser um usuário válido
        - Peso deve ser positivo (se informado)
        - Temperatura deve estar entre 35°C e 45°C (se informada)
        - Data da consulta não pode ser muito no futuro

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet": 1,
            "veterinario": 3,
            "data_consulta": "2024-01-15T10:30:00",
            "tipo_consulta": "ROTINA",
            "peso": "5.2",
            "temperatura": "38.5",
            "motivo_consulta": "Consulta de rotina e aplicação de vacina anual",
            "exame_fisico": "Animal alerta, responsivo. Mucosas rosadas. Ausculta cardiopulmonar normal.",
            "diagnostico": "Animal saudável",
            "tratamento": "Aplicação de vacina V10",
            "medicamentos": "Vacina V10 - 1ml subcutânea",
            "observacoes": "Próxima vacina em 12 meses",
            "proxima_consulta": "2025-01-15T10:30:00"
        }
        ```

        🏥 **Tipos de consulta disponíveis:**
        - ROTINA: Consulta de Rotina (padrão)
        - EMERGENCIA: Emergência
        - RETORNO: Retorno
        - EXAME: Exame
        - CIRURGIA: Cirurgia
        - VACINA: Vacinação
      properties:
        id:
          type: integer
          readOnly: true
        pet_nome:
          type: string
          readOnly: true
        veterinario_nome:
          type: string
          readOnly: true
        tipo_consulta_display:
          type: string
          readOnly: true
        idade_pet:
          type: integer
          nullable: true
          readOnly: true
        data_de_nascimento:
          type: string
          format: date
          readOnly: true
        pet:
          type: integer
          description: ID do pet que está sendo atendido
        veterinario:
          type: integer
          description: ID do veterinário responsável pelo atendimento
        motivo_consulta:
          type: string
          description: Descreva o motivo principal da consulta, sintomas relatados
            pelo tutor ou observações iniciais
        data_consulta:
          type: string
          format: date-time
          description: 'Data e hora da consulta (formato: YYYY-MM-DDTHH:MM:SS). Se
            não informado, usa data/hora atual'
        tipo_consulta:
          allOf:
          - $ref: '#/components/schemas/TipoConsultaEnum'
          default: ROTINA
          description: |-
            Tipo de consulta realizada

            * `ROTINA` - Consulta de Rotina
            * `EMERGENCIA` - Emergência
            * `RETORNO` - Retorno
            * `EXAME` - Exame
            * `CIRURGIA` - Cirurgia
            * `VACINA` - Vacinação
        peso:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: 'Peso atual do pet em quilogramas (ex: 5.20)'
        temperatura:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          nullable: true
          description: 'Temperatura corporal em graus Celsius, entre 35°C e 45°C (ex:
            38.5)'
        exame_fisico:
          type: string
          description: 'Descrição detalhada do exame físico realizado: inspeção, palpação,
            ausculta, etc.'
        diagnostico:
          type: string
          description: Diagnóstico médico com base nos achados clínicos e exames complementares
        tratamento:
          type: string
          description: 'Descrição do tratamento prescrito: procedimentos realizados,
            orientações ao tutor'
        medicamentos:
          type: string
          description: 'Lista detalhada dos medicamentos prescritos: nome, dosagem,
            frequência, duração'
        observacoes:
          type: string
          description: Observações adicionais, recomendações especiais ou informações
            relevantes
        proxima_consulta:
          type: string
          format: date-time
          nullable: true
          description: Data e hora da próxima consulta agendada (se aplicável)
        created_at:
          type: string
          format: date-time
          readOnly: true
          title: Criado em
        updated_at:
          type: string
          format: date-time
          readOnly: true
          title: Atualizado em
      required:
      - created_at
      - data_de_nascimento
      - id
      - idade_pet
      - motivo_consulta
      - pet
      - pet_nome
      - tipo_consulta_display
      - updated_at
      - veterinario
      - veterinario_nome
    ProntuarioRequest:
      type: object
      description: |-
        Serializer para criação e gerenciamento de prontuários médicos dos pets.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: pet, veterinario, motivo_consulta
        - **Campos opcionais**: data_consulta, tipo_consulta, peso, temperatura, exame_fisico, diagnostico, tratamento, medicamentos, observacoes, proxima_consulta
        - **Campos automáticos**: id, created_at, updated_at, idade_pet (calculados automaticamente)
        - **Campos de leitura**: pet_nome, veterinario_nome, tipo_consulta_display (para exibição)

        ⚠️ **Validações importantes:**
        - Pet deve existir e estar ativo
        - Veterinário deve ser um usuário válido
        - Peso deve ser positivo (se informado)
        - Temperatura deve estar entre 35°C e 45°C (se informada)
        - Data da consulta não pode ser muito no futuro

        💡 **Exemplo de uso para criação:**
        ```json
        {
            "pet": 1,
            "veterinario": 3,
            "data_consulta": "2024-01-15T10:30:00",
            "tipo_consulta": "ROTINA",
            "peso": "5.2",
            "temperatura": "38.5",
            "motivo_consulta": "Consulta de rotina e aplicação de vacina anual",
            "exame_fisico": "Animal alerta, responsivo. Mucosas rosadas. Ausculta cardiopulmonar normal.",
            "diagnostico": "Animal saudável",
            "tratamento": "Aplicação de vacina V10",
            "medicamentos": "Vacina V10 - 1ml subcutânea",
            "observacoes": "Próxima vacina em 12 meses",
            "proxima_consulta": "2025-01-15T10:30:00"
        }
        ```

        🏥 **Tipos de consulta disponíveis:**
        - ROTINA: Consulta de Rotina (padrão)
        - EMERGENCIA: Emergência
        - RETORNO: Retorno
        - EXAME: Exame
        - CIRURGIA: Cirurgia
        - VACINA: Vacinação
      properties:
        pet:
          type: integer
          description: ID do pet que está sendo atendido
        veterinario:
          type: integer
          description: ID do veterinário responsável pelo atendimento
        motivo_consulta:
          type: string
          minLength: 1
          description: Descreva o motivo principal da consulta, sintomas relatados
            pelo tutor ou observações iniciais
        data_consulta:
          type: string
          format: date-time
          description: 'Data e hora da consulta (formato: YYYY-MM-DDTHH:MM:SS). Se
            não informado, usa data/hora atual'
        tipo_consulta:
          allOf:
          - $ref: '#/components/schemas/TipoConsultaEnum'
          default: ROTINA
          description: |-
            Tipo de consulta realizada

            * `ROTINA` - Consulta de Rotina
            * `EMERGENCIA` - Emergência
            * `RETORNO` - Retorno
            * `EXAME` - Exame
            * `CIRURGIA` - Cirurgia
            * `VACINA` - Vacinação
        peso:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          nullable: true
          description: 'Peso atual do pet em quilogramas (ex: 5.20)'
        temperatura:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,1})?$
          nullable: true
          description: 'Temperatura corporal em graus Celsius, entre 35°C e 45°C (ex:
            38.5)'
        exame_fisico:
          type: string
          description: 'Descrição detalhada do exame físico realizado: inspeção, palpação,
            ausculta, etc.'
        diagnostico:
          type: string
          description: Diagnóstico médico com base nos achados clínicos e exames complementares
        tratamento:
          type: string
          description: 'Descrição do tratamento prescrito: procedimentos realizados,
            orientações ao tutor'
        medicamentos:
          type: string
          description: 'Lista detalhada dos medicamentos prescritos: nome, dosagem,
            frequência, duração'
        observacoes:
          type: string
          description: Observações adicionais, recomendações especiais ou informações
            relevantes
        proxima_consulta:
          type: string
          format: date-time
          nullable: true
          description: Data e hora da próxima consulta agendada (se aplicável)
      required:
      - motivo_consulta
      - pet
      - veterinario
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    ResetTokenRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
      required:
      - token
    Role821Enum:
      enum:
      - ADMIN
      - FUNCIONARIO
      - VETERINARIO
      - CLIENTE
      type: string
      description: |-
        * `ADMIN` - Admin
        * `FUNCIONARIO` - Funcionário
        * `VETERINARIO` - Veterinário
        * `CLIENTE` - Cliente
    Servico:
      type: object
      description: |-
        Serializer para criação e listagem de serviços oferecidos pelo pet shop.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: nome, preco
        - **Campos opcionais**: descricao, duracao, disponivel
        - **Validações especiais**: nome único, preço positivo

        💡 **Exemplo de uso:**
        ```json
        {
            "nome": "Banho e Tosa Completa",
            "descricao": "Banho com produtos especializados, tosa higiênica e corte de unhas",
            "duracao": "01:30:00",
            "preco": "45.00",
            "disponivel": true
        }
        ```
      properties:
        id:
          type: integer
          readOnly: true
        nome:
          type: string
          description: 'Nome do serviço oferecido (ex: Banho e Tosa, Consulta Veterinária)'
          maxLength: 100
        descricao:
          type: string
          description: Descrição detalhada do serviço incluindo o que está incluído
        duracao:
          type: string
          description: 'Duração estimada do serviço no formato HH:MM:SS (ex: 01:30:00
            para 1h30min)'
        preco:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          description: 'Valor do serviço em reais (ex: 45.00)'
        disponivel:
          type: boolean
          default: true
          description: Marque se o serviço está sendo oferecido atualmente
      required:
      - id
      - nome
      - preco
    ServicoRequest:
      type: object
      description: |-
        Serializer para criação e listagem de serviços oferecidos pelo pet shop.

        📋 **Estrutura do Endpoint:**
        - **Campos obrigatórios**: nome, preco
        - **Campos opcionais**: descricao, duracao, disponivel
        - **Validações especiais**: nome único, preço positivo

        💡 **Exemplo de uso:**
        ```json
        {
            "nome": "Banho e Tosa Completa",
            "descricao": "Banho com produtos especializados, tosa higiênica e corte de unhas",
            "duracao": "01:30:00",
            "preco": "45.00",
            "disponivel": true
        }
        ```
      properties:
        nome:
          type: string
          minLength: 1
          description: 'Nome do serviço oferecido (ex: Banho e Tosa, Consulta Veterinária)'
          maxLength: 100
        descricao:
          type: string
          description: Descrição detalhada do serviço incluindo o que está incluído
        duracao:
          type: string
          description: 'Duração estimada do serviço no formato HH:MM:SS (ex: 01:30:00
            para 1h30min)'
        preco:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          description: 'Valor do serviço em reais (ex: 45.00)'
        disponivel:
          type: boolean
          default: true
          description: Marque se o serviço está sendo oferecido atualmente
      required:
      - nome
      - preco
    SexoEnum:
      enum:
      - MACHO
      - FEMEA
      - DESCONHECIDO
      type: string
      description: |-
        * `MACHO` - Macho
        * `FEMEA` - Fêmea
        * `DESCONHECIDO` - Desconhecido
    StatusEnum:
      enum:
      - AGENDADO
      - CONCLUIDO
      - CANCELADO
      type: string
      description: |-
        * `AGENDADO` - Agendado
        * `CONCLUIDO` - Concluído
        * `CANCELADO` - Cancelado
    TipoConsultaEnum:
      enum:
      - ROTINA
      - EMERGENCIA
      - RETORNO
      - EXAME
      - CIRURGIA
      - VACINA
      type: string
      description: |-
        * `ROTINA` - Consulta de Rotina
        * `EMERGENCIA` - Emergência
        * `RETORNO` - Retorno
        * `EXAME` - Exame
        * `CIRURGIA` - Cirurgia
        * `VACINA` - Vacinação
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
    UserAdmin:
      type: object
      description: Serializer para operações administrativas de usuários
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
          readOnly: true
        profile:
          $ref: '#/components/schemas/Profile'
      required:
      - date_joined
      - id
      - profile
      - username
    UserAdminCreate:
      type: object
      description: |-
        🌟 SERIALIZER PARA CRIAÇÃO DE USUÁRIOS POR ADMINISTRADORES

        Administradores podem criar usuários de QUALQUER tipo no sistema:
        CLIENTE, FUNCIONARIO, VETERINARIO ou ADMIN

        📋 EXEMPLO DE USO:
        {
            "username": "ATEJhFGqAim",
            "password": "minhasenha123",
            "confirm_password": "minhasenha123",
            "email": "user@example.com",
            "first_name": "João",
            "last_name": "Silva",
            "role": "VETERINARIO",
            "telefone": "(11) 99999-9999",
            "endereco": "Rua das Flores, 123, São Paulo",
            "crmv": "SP-12345",
            "especialidade": "Clínica Geral"
        }

        🔑 PRIVILÉGIOS: Admins têm acesso total - podem criar inclusive outros admins!
      properties:
        username:
          type: string
          description: '🔴 OBRIGATÓRIO: Nome de usuário único no sistema para login'
          maxLength: 150
        email:
          type: string
          format: email
          description: '🔴 OBRIGATÓRIO: Email válido para contato e recuperação de
            conta'
        first_name:
          type: string
          description: '🔴 OBRIGATÓRIO: Primeiro nome do usuário'
          maxLength: 150
        last_name:
          type: string
          description: '🔴 OBRIGATÓRIO: Sobrenome do usuário'
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/Role821Enum'
          default: CLIENTE
          description: |-
            🟡 ESCOLHA: Tipo de usuário no sistema. Admins podem criar qualquer tipo, inclusive outros admins.

            * `ADMIN` - Admin
            * `FUNCIONARIO` - Funcionário
            * `VETERINARIO` - Veterinário
            * `CLIENTE` - Cliente
        telefone:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Telefone de contato. Inclua DDD para melhor comunicação.'
          maxLength: 20
        endereco:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Endereço residencial ou comercial completo'
        crmv:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: OBRIGATÓRIO apenas para veterinários. Número
            do CRMV com estado.'
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: Especialidade médica veterinária (opcional)'
          maxLength: 100
      required:
      - email
      - first_name
      - last_name
      - username
    UserAdminCreateRequest:
      type: object
      description: |-
        🌟 SERIALIZER PARA CRIAÇÃO DE USUÁRIOS POR ADMINISTRADORES

        Administradores podem criar usuários de QUALQUER tipo no sistema:
        CLIENTE, FUNCIONARIO, VETERINARIO ou ADMIN

        📋 EXEMPLO DE USO:
        {
            "username": "ATEJhFGqAim",
            "password": "minhasenha123",
            "confirm_password": "minhasenha123",
            "email": "user@example.com",
            "first_name": "João",
            "last_name": "Silva",
            "role": "VETERINARIO",
            "telefone": "(11) 99999-9999",
            "endereco": "Rua das Flores, 123, São Paulo",
            "crmv": "SP-12345",
            "especialidade": "Clínica Geral"
        }

        🔑 PRIVILÉGIOS: Admins têm acesso total - podem criar inclusive outros admins!
      properties:
        username:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Nome de usuário único no sistema para login'
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: '🔴 OBRIGATÓRIO: Senha segura com no mínimo 8 caracteres'
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Confirme a senha digitada acima para validação'
        email:
          type: string
          format: email
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Email válido para contato e recuperação de
            conta'
        first_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Primeiro nome do usuário'
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Sobrenome do usuário'
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/Role821Enum'
          default: CLIENTE
          description: |-
            🟡 ESCOLHA: Tipo de usuário no sistema. Admins podem criar qualquer tipo, inclusive outros admins.

            * `ADMIN` - Admin
            * `FUNCIONARIO` - Funcionário
            * `VETERINARIO` - Veterinário
            * `CLIENTE` - Cliente
        telefone:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Telefone de contato. Inclua DDD para melhor comunicação.'
          maxLength: 20
        endereco:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Endereço residencial ou comercial completo'
        crmv:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: OBRIGATÓRIO apenas para veterinários. Número
            do CRMV com estado.'
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: Especialidade médica veterinária (opcional)'
          maxLength: 100
      required:
      - confirm_password
      - email
      - first_name
      - last_name
      - password
      - username
    UserAdminRequest:
      type: object
      description: Serializer para operações administrativas de usuários
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        profile:
          $ref: '#/components/schemas/ProfileRequest'
      required:
      - profile
    UserDetail:
      type: object
      description: Serializer para visualização completa do usuário
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
          readOnly: true
        profile:
          allOf:
          - $ref: '#/components/schemas/Profile'
          readOnly: true
      required:
      - date_joined
      - id
      - profile
      - username
    UserDetailRequest:
      type: object
      description: Serializer para visualização completa do usuário
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
    UserFuncionarioCreate:
      type: object
      description: |-
        🌟 SERIALIZER PARA CRIAÇÃO DE USUÁRIOS POR FUNCIONÁRIOS

        Permite que funcionários do sistema criem novos usuários dos tipos:
        CLIENTE, FUNCIONARIO ou VETERINARIO

        📋 EXEMPLO DE USO:
        {
            "username": "novousuario",
            "password": "minhasenha123",
            "confirm_password": "minhasenha123",
            "email": "user@example.com",
            "first_name": "Maria",
            "last_name": "Santos",
            "role": "CLIENTE",
            "telefone": "(11) 88888-8888",
            "endereco": "Av. Principal, 456, São Paulo",
            "crmv": "SP-12345",
            "especialidade": "Clínica Geral"
        }

        💡 DICA: Para veterinários, o campo CRMV é obrigatório!
      properties:
        username:
          type: string
          description: '🔴 OBRIGATÓRIO: Nome de usuário único no sistema para login'
          maxLength: 150
        email:
          type: string
          format: email
          description: '🔴 OBRIGATÓRIO: Email válido para contato profissional'
        first_name:
          type: string
          description: '🔴 OBRIGATÓRIO: Primeiro nome do usuário'
          maxLength: 150
        last_name:
          type: string
          description: '🔴 OBRIGATÓRIO: Sobrenome do usuário'
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/UserFuncionarioCreateRoleEnum'
          default: CLIENTE
          description: |-
            🟡 ESCOLHA: Tipo de usuário que será criado. Define as permissões no sistema.

            * `CLIENTE` - Cliente - Dono de pet
            * `FUNCIONARIO` - Funcionário - Atendente/Recepção
            * `VETERINARIO` - Veterinário - Profissional médico
        telefone:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Telefone de contato. Recomendado para funcionários
            e veterinários.'
          maxLength: 20
        endereco:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Endereço residencial ou comercial completo'
        crmv:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: OBRIGATÓRIO para veterinários. Número do CRMV
            com estado (ex: SP-12345)'
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: Especialidade médica (opcional)'
          maxLength: 100
      required:
      - email
      - first_name
      - last_name
      - username
    UserFuncionarioCreateRequest:
      type: object
      description: |-
        🌟 SERIALIZER PARA CRIAÇÃO DE USUÁRIOS POR FUNCIONÁRIOS

        Permite que funcionários do sistema criem novos usuários dos tipos:
        CLIENTE, FUNCIONARIO ou VETERINARIO

        📋 EXEMPLO DE USO:
        {
            "username": "novousuario",
            "password": "minhasenha123",
            "confirm_password": "minhasenha123",
            "email": "user@example.com",
            "first_name": "Maria",
            "last_name": "Santos",
            "role": "CLIENTE",
            "telefone": "(11) 88888-8888",
            "endereco": "Av. Principal, 456, São Paulo",
            "crmv": "SP-12345",
            "especialidade": "Clínica Geral"
        }

        💡 DICA: Para veterinários, o campo CRMV é obrigatório!
      properties:
        username:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Nome de usuário único no sistema para login'
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: '🔴 OBRIGATÓRIO: Senha segura com no mínimo 8 caracteres'
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Confirme a senha digitada acima'
        email:
          type: string
          format: email
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Email válido para contato profissional'
        first_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Primeiro nome do usuário'
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Sobrenome do usuário'
          maxLength: 150
        role:
          allOf:
          - $ref: '#/components/schemas/UserFuncionarioCreateRoleEnum'
          default: CLIENTE
          description: |-
            🟡 ESCOLHA: Tipo de usuário que será criado. Define as permissões no sistema.

            * `CLIENTE` - Cliente - Dono de pet
            * `FUNCIONARIO` - Funcionário - Atendente/Recepção
            * `VETERINARIO` - Veterinário - Profissional médico
        telefone:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Telefone de contato. Recomendado para funcionários
            e veterinários.'
          maxLength: 20
        endereco:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Endereço residencial ou comercial completo'
        crmv:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: OBRIGATÓRIO para veterinários. Número do CRMV
            com estado (ex: SP-12345)'
          maxLength: 20
        especialidade:
          type: string
          nullable: true
          description: '🔵 VETERINÁRIO: Especialidade médica (opcional)'
          maxLength: 100
      required:
      - confirm_password
      - email
      - first_name
      - last_name
      - password
      - username
    UserFuncionarioCreateRoleEnum:
      enum:
      - CLIENTE
      - FUNCIONARIO
      - VETERINARIO
      type: string
      description: |-
        * `CLIENTE` - Cliente - Dono de pet
        * `FUNCIONARIO` - Funcionário - Atendente/Recepção
        * `VETERINARIO` - Veterinário - Profissional médico
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    UserSelfRegisterRequest:
      type: object
      description: |-
        🌟 SERIALIZER PARA AUTO-CADASTRO DE USUÁRIOS (PÚBLICO) - APENAS CLIENTE

        Este endpoint permite que novos usuários se cadastrem no sistema como CLIENTE.
        Perfeito para donos de pets que querem agendar consultas.

        📋 EXEMPLO DE USO:
        {
            "username": "maria_silva",
            "password": "minhasenha123",
            "confirm_password": "minhasenha123",
            "email": "maria@email.com",
            "first_name": "Maria",
            "last_name": "Silva",
            "telefone": "(11) 99999-9999",
            "endereco": "Rua das Flores, 123, São Paulo - SP"
        }

        🎯 RESULTADO: Usuário criado automaticamente como CLIENTE, pronto para usar o sistema.
      properties:
        username:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Nome de usuário único no sistema. Será usado
            para fazer login.'
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 8
          description: '🔴 OBRIGATÓRIO: Senha segura com no mínimo 8 caracteres. Use
            letras, números e símbolos.'
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Digite a mesma senha para confirmar. Deve ser
            idêntica à senha acima.'
        email:
          type: string
          format: email
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Email válido para contato e recuperação de
            senha. Exemplo: nome@provedor.com'
        first_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Primeiro nome do usuário. Como você gostaria
            de ser chamado(a).'
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          description: '🔴 OBRIGATÓRIO: Sobrenome do usuário. Seu nome de família.'
          maxLength: 150
        telefone:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Telefone para contato (pode ficar em branco).
            Inclua DDD.'
          maxLength: 20
        endereco:
          type: string
          nullable: true
          description: '⚪ OPCIONAL: Endereço residencial completo (pode ficar em branco).
            Rua, número, bairro, cidade.'
      required:
      - confirm_password
      - email
      - first_name
      - last_name
      - password
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
tags:
- name: Sistema
  description: Informações gerais do sistema, status e links de navegação
- name: Autenticação
  description: Endpoints de login, registro e reset de senha
- name: Usuários
  description: Gestão de perfis de usuários do sistema
- name: Pets
  description: Operações relacionadas ao cadastro e gestão de pets
- name: Serviços
  description: Catálogo de serviços veterinários disponíveis
- name: Agendamentos
  description: Sistema de agendamento de consultas e serviços
- name: Horários
  description: Consulta de horários disponíveis para agendamento
- name: Prontuários
  description: Prontuários médicos e histórico de atendimentos
- name: Configuração
  description: Configurações de horários de funcionamento e feriados do sistema

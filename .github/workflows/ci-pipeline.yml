name: CI Pipeline - Lint e Testes

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: "An√°lise de C√≥digo (Pylint)"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install pylint pylint-django django djangorestframework
          pip install -r backend/requirements.txt
          
      - name: Executar Pylint no backend
        run: |
          cd backend
          pylint --errors-only $(find . -name "*.py" -not -path "./venv/*" -not -path "./__pycache__/*" -not -path "./migrations/*")
        continue-on-error: false
        
      - name: Relat√≥rio de Pylint (informativo)
        run: |
          cd backend
          pylint --errors-only $(find . -name "*.py" -not -path "./venv/*" -not -path "./__pycache__/*" -not -path "./migrations/*") || true
        continue-on-error: true

  tests:
    name: "Execu√ß√£o de Testes"
    runs-on: ubuntu-latest
    needs: lint  # Executa ap√≥s o lint passar
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: top_pet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install coverage pytest-cov pytest-django
          
      - name: Configurar vari√°veis de ambiente
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/top_pet_test" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          
      - name: Configurar banco de dados de teste
        run: |
          cd backend
          python manage.py migrate --settings=top_pet.settings
          
      - name: Executar verifica√ß√£o do sistema
        run: |
          cd backend
          python manage.py check --verbosity=2
          
      - name: Executar testes do Django com cobertura
        run: |
          cd backend
          coverage run --source='.' manage.py test --verbosity=2 --keepdb
        env:
          DJANGO_SETTINGS_MODULE: top_pet.settings
          
      - name: Executar testes espec√≠ficos (pets)
        run: |
          cd backend
          python manage.py test pets.tests_unidade pets.tests --verbosity=2
        continue-on-error: false
        
      - name: Executar testes espec√≠ficos (agendamentos)
        run: |
          cd backend
          python manage.py test agendamentos.tests_integracao --verbosity=2
        continue-on-error: false
        
      - name: Executar testes espec√≠ficos (prontu√°rios)
        run: |
          cd backend
          python manage.py test prontuarios.tests --verbosity=2
        continue-on-error: false
        
      - name: Executar testes espec√≠ficos (users)
        run: |
          cd backend
          python manage.py test users.tests --verbosity=2
        continue-on-error: false
        
      - name: Gerar relat√≥rio de cobertura
        run: |
          cd backend
          coverage report --show-missing
          coverage html
          coverage xml
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Relat√≥rio final de testes
        run: |
          cd backend
          echo "‚úÖ Todos os testes executados com sucesso!"
          echo ""
          echo "üìä Resumo dos testes:"
          echo "  - ‚úÖ pets: testes de unidade e b√°sicos"
          echo "  - ‚úÖ agendamentos: testes de integra√ß√£o"
          echo "  - ‚úÖ users: testes b√°sicos"
          echo "  - ‚úÖ prontuarios: testes de modelo"
          echo ""
          echo "üìà Relat√≥rio de cobertura gerado em htmlcov/index.html"
          
  security:
    name: "Verifica√ß√£o de Seguran√ßa"
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar ferramentas de seguran√ßa
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          
      - name: Verificar vulnerabilidades com safety
        run: |
          cd backend
          safety check -r requirements.txt
        continue-on-error: true
        
      - name: An√°lise de seguran√ßa com bandit
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium --confidence-level medium
        continue-on-error: true
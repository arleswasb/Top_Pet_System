name: CI Definitiva do Django

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ----------------------------------------------------
  # JOB 1: Testes Unitários (Rápidos)
  # ----------------------------------------------------
  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # CORREÇÃO: Cria um .env para este job, pois o docker-compose.yml agora o exige.
      # As credenciais aqui devem bater com as do serviço 'postgres' acima.
      - name: Criar arquivo .env para testes unitários
        run: |
          echo "POSTGRES_NAME=test_db" >> .env
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=test_password" >> .env
          echo "POSTGRES_HOST=postgres" >> .env

      - name: Tornar entrypoint.sh executável
        run: chmod +x backend/entrypoint.sh
      
      - name: Executar os testes unitários do Django
        # O 'env:' aqui foi removido, pois o docker-compose run lerá o .env que criamos.
        run: docker compose run --rm web python manage.py test
  
  # ----------------------------------------------------
  # JOB 2: Testes de Ponta a Ponta (API Completa)
  # ----------------------------------------------------
  endpoint-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Tornar entrypoint.sh executável
        run: chmod +x backend/entrypoint.sh

      - name: Criar arquivo .env com Secrets do GitHub
        run: |
          echo "POSTGRES_NAME=top_pet_db" >> .env
          echo "POSTGRES_USER=user" >> .env
          echo "POSTGRES_PASSWORD=password" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "TEST_ADMIN_USER=${{ secrets.TEST_ADMIN_USER }}" >> .env
          echo "TEST_ADMIN_PASSWORD=${{ secrets.TEST_ADMIN_PASSWORD }}" >> .env
          echo "TEST_CLIENTE_USER=${{ secrets.TEST_CLIENTE_USER }}" >> .env
          echo "TEST_CLIENTE_PASSWORD=${{ secrets.TEST_CLIENTE_PASSWORD }}" >> .env
          echo "TEST_FUNC_USER=${{ secrets.TEST_FUNC_USER }}" >> .env
          echo "TEST_FUNC_PASSWORD=${{ secrets.TEST_FUNC_PASSWORD }}" >> .env

      - name: Subir serviços com Docker Compose
        run: docker compose up -d --build

      - name: Aguardar os serviços estabilizarem
        run: sleep 20

      - name: Povoar o banco de dados com usuários de teste
        run: docker compose exec web python manage.py seed_data
        
      - name: Verificar status dos contêineres (Debug)
        run: docker ps -a
        
      - name: Configurar Python e Rodar Testes de API
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - run: pip install requests
      - run: python teste_api.py
        env:
          TEST_ADMIN_USER: '${{ secrets.TEST_ADMIN_USER }}'
          TEST_ADMIN_PASSWORD: '${{ secrets.TEST_ADMIN_PASSWORD }}'
          TEST_CLIENTE_USER: '${{ secrets.TEST_CLIENTE_USER }}'
          TEST_CLIENTE_PASSWORD: '${{ secrets.TEST_CLIENTE_PASSWORD }}'
          TEST_FUNC_USER: '${{ secrets.TEST_FUNC_USER }}'
          TEST_FUNC_PASSWORD: '${{ secrets.TEST_FUNC_PASSWORD }}'

      - name: Mostrar logs para depuração
        if: always()
        run: docker compose logs
name: Top Pet System - CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Define um serviço de banco de dados que rodará durante os testes
    services:
      postgres:
        image: postgres:13
        # Define as credenciais para o banco de dados de teste
        env:
          POSTGRES_DB: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        # Verifica se o banco está pronto antes de continuar
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        
      - name: 🐳 Build dos containers Docker
        run: docker compose build web
        
      - name: 🔍 Verificar estrutura do projeto
        run: |
          echo "📂 Verificando estrutura do projeto..."
          ls -la backend/
          echo "📦 Apps Django encontrados:"
          ls -la backend/*/
        
      - name: 🔧 Aplicar migrações
        run: docker compose run --rm web python manage.py migrate
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 🧪 Executar testes - Users App
        run: docker compose run --rm web python manage.py test users.tests -v 2
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 🐕 Executar testes - Pets App
        run: docker compose run --rm web python manage.py test pets.tests -v 2
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 📅 Executar testes - Agendamentos App
        run: docker compose run --rm web python manage.py test agendamentos.tests -v 2
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 🏥 Executar testes - Prontuarios App
        run: docker compose run --rm web python manage.py test prontuarios.tests -v 2
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 🚀 Executar todos os testes do sistema
        run: docker compose run --rm web python manage.py test --verbosity=2
        env:
          POSTGRES_NAME: top_pet_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
          
      - name: 📊 Verificar cobertura de código (opcional)
        run: |
          echo "✅ Testes concluídos com sucesso!"
          echo "📈 Apps testados:"
          echo "  - 👥 Users: Autenticação e perfis"
          echo "  - 🐕 Pets: Cadastro e gestão de pets"
          echo "  - 📅 Agendamentos: Sistema de agendamento"
          echo "  - 🏥 Prontuarios: Registros médicos"
          
      - name: 🧹 Limpeza dos containers
        if: always()
        run: docker compose down --volumes --remove-orphans
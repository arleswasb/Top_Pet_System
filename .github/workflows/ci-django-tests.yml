name: CI Definitiva do Django

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # O job 'unit-tests' não precisa mudar e pode continuar como está.
  unit-tests:
    # ... (sem mudanças aqui) ...

  endpoint-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # Este passo agora prepara o ambiente para TODOS os comandos docker compose
      - name: Criar arquivo .env a partir dos Secrets do GitHub
        run: |
          echo "POSTGRES_NAME=top_pet_db" >> .env
          echo "POSTGRES_USER=user" >> .env
          echo "POSTGRES_PASSWORD=password" >> .env
          echo "POSTGRES_HOST=db" >> .env
          echo "TEST_ADMIN_USER=${{ secrets.TEST_ADMIN_USER }}" >> .env
          echo "TEST_ADMIN_PASSWORD=${{ secrets.TEST_ADMIN_PASSWORD }}" >> .env
          echo "TEST_CLIENTE_USER=${{ secrets.TEST_CLIENTE_USER }}" >> .env
          echo "TEST_CLIENTE_PASSWORD=${{ secrets.TEST_CLIENTE_PASSWORD }}" >> .env
          echo "TEST_FUNC_USER=${{ secrets.TEST_FUNC_USER }}" >> .env
          echo "TEST_FUNC_PASSWORD=${{ secrets.TEST_FUNC_PASSWORD }}" >> .env

      - name: Subir serviços com Docker Compose
        run: docker compose up -d --build

      - name: Aguardar os serviços estabilizarem
        run: sleep 20

      # Este comando agora funcionará, pois o serviço 'web' já foi iniciado com as variáveis do .env
      - name: Povoar o banco de dados
        run: docker compose exec web python manage.py seed_data

      - name: Verificar status dos contêineres (Debug)
        run: docker ps -a
        
      - name: Configurar Python e Rodar Testes de API
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - run: pip install requests
      - run: python teste_api.py # Podemos rodar o script inteiro de uma vez
        env:
          # O script que roda no runner do GitHub ainda precisa das variáveis
          TEST_ADMIN_USER: ${{ secrets.TEST_ADMIN_USER }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_CLIENTE_USER: ${{ secrets.TEST_CLIENTE_USER }}
          TEST_CLIENTE_PASSWORD: ${{ secrets.TEST_CLIENTE_PASSWORD }}
          TEST_FUNC_USER: ${{ secrets.TEST_FUNC_USER }}
          TEST_FUNC_PASSWORD: ${{ secrets.TEST_FUNC_PASSWORD }}

      - name: Mostrar logs para depuração
        if: always()
        run: docker compose logs
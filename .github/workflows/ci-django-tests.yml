name: CI Completa do Django (Unidade + Endpoints)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
      
      - name: Tornar entrypoint.sh executável
        run: chmod +x backend/entrypoint.sh
      
      - name: Executar os testes unitários do Django
        run: docker compose run --rm web python manage.py test
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres

  endpoint-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Tornar entrypoint.sh executável
        run: chmod +x backend/entrypoint.sh

      - name: Construir e iniciar os contêineres em background
        run: docker compose up -d --build

      - name: Aguardar os serviços estabilizarem
        run: sleep 20
        
      # --- CORREÇÃO PRINCIPAL AQUI ---
      - name: Povoar o banco de dados com dados de teste
        # Trocamos 'exec' por 'run'. O 'run' cria um contêiner temporário,
        # passa as variáveis de ambiente, executa o comando e sai.
        run: docker compose run --rm web python manage.py seed_data
        env:
          # Estas variáveis são passadas para o comando seed_data
          TEST_ADMIN_USER: ${{ secrets.TEST_ADMIN_USER }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_CLIENTE_USER: ${{ secrets.TEST_CLIENTE_USER }}
          TEST_CLIENTE_PASSWORD: ${{ secrets.TEST_CLIENTE_PASSWORD }}
          TEST_FUNC_USER: ${{ secrets.TEST_FUNC_USER }}
          TEST_FUNC_PASSWORD: ${{ secrets.TEST_FUNC_PASSWORD }}
      # --------------------------

      - name: Configurar Python no Runner
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Instalar dependências do script de teste
        run: pip install requests
      
      - name: ✅ Teste de Endpoint - Criar Serviço
        run: python teste_api.py criar_servico
        env:
          # As variáveis para o script de teste
          TEST_ADMIN_USER: ${{ secrets.TEST_ADMIN_USER }}
          # ... (copie todas as 6 variáveis de teste aqui)
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_CLIENTE_USER: ${{ secrets.TEST_CLIENTE_USER }}
          TEST_CLIENTE_PASSWORD: ${{ secrets.TEST_CLIENTE_PASSWORD }}
          TEST_FUNC_USER: ${{ secrets.TEST_FUNC_USER }}
          TEST_FUNC_PASSWORD: ${{ secrets.TEST_FUNC_PASSWORD }}

      - name: ✅ Teste de Endpoint - Criar Pet
        run: python teste_api.py criar_pet
        env:
          # ... (copie todas as 6 variáveis de teste aqui também)
          TEST_ADMIN_USER: ${{ secrets.TEST_ADMIN_USER }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_CLIENTE_USER: ${{ secrets.TEST_CLIENTE_USER }}
          TEST_CLIENTE_PASSWORD: ${{ secrets.TEST_CLIENTE_PASSWORD }}
          TEST_FUNC_USER: ${{ secrets.TEST_FUNC_USER }}
          TEST_FUNC_PASSWORD: ${{ secrets.TEST_FUNC_PASSWORD }}

      - name: Mostrar logs dos contêineres (para depuração)
        if: always()
        run: docker compose logs
name: CI Pipeline Django

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Linter (flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: Construir a imagem para o linter
        run: docker compose build backend

      - name: Executar o flake8
        run: docker compose run --rm backend flake8 --select=F .

  test:
    name: Executar Testes Automatizados
    needs: lint # O job de teste sÃ³ roda se o de lint passar
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          # Use secrets para as credenciais do banco de dados
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: Construir as imagens Docker
        run: docker compose build

      # --- CADA TESTE RODA EM UM PASSO SEPARADO ---\
      - name: âœ… Testes de Agendamentos
        if: always() # Garante que este passo rode mesmo que o anterior falhe
        run: docker compose run --no-deps --rm backend pytest --cov-append agendamentos/tests.py
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres

      - name: âœ… Testes de IntegraÃ§Ã£o de Pets
        if: always()
        run: docker compose run --no-deps --rm backend pytest --cov-append pets/tests.py
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres

      - name: âœ… Testes de Unidade de Pets
        if: always()
        run: docker compose run --no-deps --rm backend pytest --cov-append pets/tests_unidade.py
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres

      - name: âœ… Testes de UsuÃ¡rios
        if: always()
        run: docker compose run --no-deps --rm backend pytest --cov-append users/tests.py
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres

      - name: ðŸ“Š Verificar Cobertura de Testes
        if: always() # Roda sempre para garantir que a verificaÃ§Ã£o seja feita
        run: docker compose run --no-deps --rm backend pytest --cov-fail-under=80
        env:
          POSTGRES_NAME: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_HOST: postgres
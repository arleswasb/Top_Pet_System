name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/swagger-documentation-updates ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-
    
    - name: Install lint dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install flake8 pylint
    
    - name: Run flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run pylint (Errors Only)
      run: |
        cd backend
        echo "üîç Running Pylint - Checking for ERRORS only (no style/formatting)"
        # Run pylint focusing only on errors and critical issues
        pylint --rcfile=.pylintrc **/*.py --errors-only --disable=import-error

  unit-tests:
    name: Unit & Validation Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: top_pet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-test-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-test-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install coverage
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/top_pet_test" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend
        python manage.py makemigrations --verbosity=2
        python manage.py migrate --verbosity=2
    
    - name: Run unit tests
      run: |
        cd backend
        coverage run --source='.' manage.py test pets.tests_unidade --verbosity=2
    
    - name: Run validation tests
      run: |
        cd backend
        coverage run --append --source='.' manage.py test pets.tests_validacao --verbosity=2

  integration-tests:
    name: Integration & API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: top_pet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-integration-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-integration-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install coverage
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/top_pet_test" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        cd backend
        python manage.py makemigrations --verbosity=2
        python manage.py migrate --verbosity=2
    
    - name: Run integration tests
      run: |
        cd backend
        coverage run --source='.' manage.py test pets.tests_integracao --verbosity=2
    
    - name: Run other module tests
      run: |
        cd backend
        coverage run --append --source='.' manage.py test users agendamentos --verbosity=2
    
    - name: Generate coverage report
      run: |
        cd backend
        coverage xml
        coverage report
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-security-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-security-
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        cd backend
        safety check -r requirements.txt
    
    - name: Run bandit security linter
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium --confidence-level medium

  build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t top-pet-system:latest -f backend/dockerfile backend/
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container top-pet-system:latest
        sleep 10
        docker stop test-container || true

  crud-simulation:
    name: CRUD API Simulation Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        SECRET_KEY='django-insecure-ci-test-key'
        DEBUG=True
        ALLOWED_HOSTS=127.0.0.1,localhost
        DB_ENGINE=django.db.backends.postgresql
        POSTGRES_NAME=top_pet_db
        POSTGRES_USER=user
        POSTGRES_PASSWORD=password
        POSTGRES_HOST=db
        DB_PORT=5432
        EOF
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 15
    
    - name: Wait for PostgreSQL to be ready
      run: |
        timeout 60 bash -c 'until docker-compose exec -T db pg_isready -U user -d top_pet_db; do sleep 2; done'
    
    - name: Run database migrations
      run: |
        docker-compose exec -T web python manage.py migrate --verbosity=0
    
    - name: Create basic configuration data
      run: |
        docker-compose exec -T web python -c "
        import os
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'top_pet.settings')
        django.setup()
        
        from configuracao.models import HorarioFuncionamento
        
        if not HorarioFuncionamento.objects.exists():
            horarios = [
                {'dia_semana': 1, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 2, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 3, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 4, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 5, 'hora_abertura': '08:00', 'hora_fechamento': '18:00'},
                {'dia_semana': 6, 'hora_abertura': '08:00', 'hora_fechamento': '12:00'},
            ]
            
            for horario in horarios:
                HorarioFuncionamento.objects.create(**horario)
        "
    
    - name: Run CRUD API Simulation
      run: |
        docker-compose exec -T web python test_api_simulation.py
    
    - name: Generate analysis report
      run: |
        docker-compose exec -T web python analyze_test_report.py
    
    - name: Upload simulation report
      uses: actions/upload-artifact@v3
      with:
        name: crud-simulation-report
        path: |
          backend/api_test_report.json
        retention-days: 30
    
    - name: Display simulation summary
      run: |
        echo "üìä CRUD Simulation Summary:"
        docker-compose exec -T web python -c "
        import json
        try:
            with open('api_test_report.json', 'r') as f:
                data = json.load(f)
            print(f'‚úÖ Total tests: {data.get(\"total_tests\", 0)}')
            print(f'‚úÖ Passed: {data.get(\"passed\", 0)}')
            print(f'‚ùå Failed: {data.get(\"failed\", 0)}')
            print(f'‚è±Ô∏è Duration: {data.get(\"total_duration\", 0):.3f}s')
            
            if data.get('failed', 0) > 0:
                print('‚ùå CRUD simulation had failures!')
                exit(1)
            else:
                print('‚úÖ All CRUD operations successful!')
        except Exception as e:
            print(f'‚ùå Error reading report: {e}')
            exit(1)
        "
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

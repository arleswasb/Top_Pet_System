# Makefile para Top Pet System
# Comandos simplificados para desenvolvimento e testes

.PHONY: help build up down test test-crud clean logs shell migrate

# Vari√°veis
COMPOSE_FILE = docker-compose.yml
SERVICE_WEB = web
SERVICE_DB = db

help: ## Mostrar esta ajuda
	@echo "Top Pet System - Comandos Dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

build: ## Construir containers Docker
	docker-compose build

up: ## Iniciar todos os servi√ßos
	docker-compose up -d
	@echo "‚úÖ Servi√ßos iniciados"
	@echo "üåê API: http://localhost:8000"
	@echo "üìö Docs: http://localhost:8000/api/docs/"

down: ## Parar todos os servi√ßos
	docker-compose down

stop: ## Parar servi√ßos sem remover containers
	docker-compose stop

restart: ## Reiniciar servi√ßos
	docker-compose restart

logs: ## Ver logs dos servi√ßos
	docker-compose logs -f

logs-web: ## Ver logs apenas da aplica√ß√£o web
	docker-compose logs -f $(SERVICE_WEB)

logs-db: ## Ver logs apenas do banco de dados
	docker-compose logs -f $(SERVICE_DB)

shell: ## Acessar shell do container web
	docker-compose exec $(SERVICE_WEB) bash

shell-db: ## Acessar shell do PostgreSQL
	docker-compose exec $(SERVICE_DB) psql -U user -d top_pet_db

migrate: ## Executar migra√ß√µes do banco
	docker-compose exec $(SERVICE_WEB) python manage.py migrate

makemigrations: ## Criar novas migra√ß√µes
	docker-compose exec $(SERVICE_WEB) python manage.py makemigrations

superuser: ## Criar superusu√°rio Django
	docker-compose exec $(SERVICE_WEB) python manage.py createsuperuser

collectstatic: ## Coletar arquivos est√°ticos
	docker-compose exec $(SERVICE_WEB) python manage.py collectstatic --noinput

test: ## Executar testes unit√°rios
	docker-compose exec $(SERVICE_WEB) python manage.py test

test-coverage: ## Executar testes com cobertura
	docker-compose exec $(SERVICE_WEB) coverage run --source='.' manage.py test
	docker-compose exec $(SERVICE_WEB) coverage report
	docker-compose exec $(SERVICE_WEB) coverage html

test-crud: ## Executar simula√ß√£o CRUD completa
	@echo "üöÄ Iniciando simula√ß√£o CRUD..."
	docker-compose up -d
	@sleep 10
	@echo "‚è≥ Aguardando servi√ßos ficarem prontos..."
	@timeout 60 bash -c 'until docker-compose exec -T $(SERVICE_DB) pg_isready -U user -d top_pet_db; do sleep 2; done'
	@echo "üóÑÔ∏è Executando migra√ß√µes..."
	docker-compose exec -T $(SERVICE_WEB) python manage.py migrate --verbosity=0
	@echo "üìä Executando simula√ß√£o CRUD..."
	docker-compose exec $(SERVICE_WEB) python test_api_simulation.py
	@echo "üìà Gerando an√°lise..."
	docker-compose exec $(SERVICE_WEB) python analyze_test_report.py

test-crud-ci: ## Executar simula√ß√£o CRUD para CI (sem intera√ß√£o)
	docker-compose up -d
	@sleep 15
	timeout 60 bash -c 'until docker-compose exec -T $(SERVICE_DB) pg_isready -U user -d top_pet_db; do sleep 2; done'
	docker-compose exec -T $(SERVICE_WEB) python manage.py migrate --verbosity=0
	docker-compose exec -T $(SERVICE_WEB) python test_api_simulation.py
	docker-compose exec -T $(SERVICE_WEB) python analyze_test_report.py

dev-setup: ## Setup completo para desenvolvimento
	@echo "üîß Configurando ambiente de desenvolvimento..."
	docker-compose build
	docker-compose up -d
	@sleep 10
	@echo "‚è≥ Aguardando banco ficar pronto..."
	@timeout 60 bash -c 'until docker-compose exec -T $(SERVICE_DB) pg_isready -U user -d top_pet_db; do sleep 2; done'
	docker-compose exec -T $(SERVICE_WEB) python manage.py migrate
	@echo "üìù Criando dados b√°sicos..."
	docker-compose exec -T $(SERVICE_WEB) python -c "import os; import django; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'top_pet.settings'); django.setup(); from configuracao.models import HorarioFuncionamento; [HorarioFuncionamento.objects.get_or_create(dia_semana=i, defaults={'hora_abertura': '08:00', 'hora_fechamento': '18:00' if i < 6 else '12:00'}) for i in range(1, 7)]"
	@echo "‚úÖ Ambiente pronto!"
	@echo "üåê API: http://localhost:8000"
	@echo "üìö Docs: http://localhost:8000/api/docs/"

clean: ## Limpar containers, volumes e imagens
	docker-compose down -v --rmi all
	docker system prune -f

status: ## Mostrar status dos servi√ßos
	docker-compose ps

health: ## Verificar sa√∫de dos servi√ßos
	@echo "üîç Verificando sa√∫de dos servi√ßos..."
	@docker-compose ps --format table
	@echo ""
	@echo "üêò PostgreSQL:"
	@docker-compose exec -T $(SERVICE_DB) pg_isready -U user -d top_pet_db && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL n√£o dispon√≠vel"
	@echo ""
	@echo "üêç Django:"
	@curl -s http://localhost:8000/api/ > /dev/null && echo "‚úÖ API OK" || echo "‚ùå API n√£o dispon√≠vel"

backup-db: ## Fazer backup do banco de dados
	@echo "üíæ Fazendo backup do banco..."
	docker-compose exec -T $(SERVICE_DB) pg_dump -U user top_pet_db > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ Backup criado: backup_$(shell date +%Y%m%d_%H%M%S).sql"

restore-db: ## Restaurar backup do banco (usage: make restore-db FILE=backup.sql)
	@if [ -z "$(FILE)" ]; then echo "‚ùå Especifique o arquivo: make restore-db FILE=backup.sql"; exit 1; fi
	@echo "üîÑ Restaurando backup: $(FILE)"
	docker-compose exec -T $(SERVICE_DB) psql -U user -d top_pet_db < $(FILE)
	@echo "‚úÖ Backup restaurado"

# Comandos de desenvolvimento r√°pido
quick-test: up migrate test-crud ## Setup r√°pido + teste CRUD

quick-dev: dev-setup ## Alias para dev-setup

# Comandos de produ√ß√£o
prod-build: ## Build para produ√ß√£o
	docker-compose -f docker-compose.prod.yml build

prod-up: ## Iniciar em modo produ√ß√£o
	docker-compose -f docker-compose.prod.yml up -d

prod-down: ## Parar modo produ√ß√£o
	docker-compose -f docker-compose.prod.yml down
